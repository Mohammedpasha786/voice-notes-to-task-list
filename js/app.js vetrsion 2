/**
 * Voice-Enabled To-Do List Application
 * Utilizes Web Speech API for voice recognition and localStorage for persistence
 */

class VoiceTodoApp {
    constructor() {
        this.tasks = this.loadTasks();
        this.recognition = null;
        this.isListening = false;
        
        this.initElements();
        this.initSpeechRecognition();
        this.bindEvents();
        this.renderTasks();
        this.updateStats();
        this.updateCharCount();
    }

    /**
     * Initialize DOM elements
     */
    initElements() {
        this.voiceButton = document.getElementById('voiceButton');
        this.voiceStatus = document.getElementById('voiceStatus');
        this.taskInput = document.getElementById('taskInput');
        this.addButton = document.getElementById('addButton');
        this.taskList = document.getElementById('taskList');
        this.totalTasks = document.getElementById('totalTasks');
        this.completedTasks = document.getElementById('completedTasks');
        this.pendingTasks = document.getElementById('pendingTasks');
        this.charCount = document.getElementById('char-count');
    }

    /**
     * Initialize Web Speech API
     */
    initSpeechRecognition() {
        // Check for Web Speech API support
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            this.recognition = new SpeechRecognition();
            
            // Configure speech recognition
            this.recognition.continuous = false;
            this.recognition.interimResults = true;
            this.recognition.lang = navigator.language || 'en-US';
            this.recognition.maxAlternatives = 1;

            this.setupSpeechEventHandlers();
        } else {
            this.handleUnsupportedBrowser();
        }
    }

    /**
     * Setup speech recognition event handlers
     */
    setupSpeechEventHandlers() {
        this.recognition.onstart = () => {
            this.isListening = true;
            this.updateVoiceButton(true);
            this.updateVoiceStatus('Listening... Speak your task now!', 'listening');
        };

        this.recognition.onresult = (event) => {
            this.handleSpeechResult(event);
        };

        this.recognition.onerror = (event) => {
            this.handleSpeechError(event);
        };

        this.recognition.onend = () => {
            this.resetVoiceButton();
        };
    }

    /**
     * Handle speech recognition results
     */
    handleSpeechResult(event) {
        let interimTranscript = '';
        let finalTranscript = '';

        for (let i = event.resultIndex; i < event.results.length; i++) {
            const transcript = event.results[i][0].transcript;
            if (event.results[i].isFinal) {
                finalTranscript += transcript;
            } else {
                interimTranscript += transcript;
            }
        }

        // Show interim results
        if (interimTranscript) {
            this.updateVoiceStatus(`Hearing: "${interimTranscript}"`, 'listening');
        }

        // Process final results
        if (finalTranscript) {
            const task = finalTranscript.trim();
            if (task && task.length > 0) {
                this.addTask(task, true);
                this.updateVoiceStatus(`‚úÖ Added: "${task}"`, 'success');
                this.announceToScreenReader(`Task added: ${task}`);
            } else {
                this.updateVoiceStatus('No valid task detected. Please try again.', 'error');
            }
        }
    }

    /**
     * Handle speech recognition errors
     */
    handleSpeechError(event) {
        this.resetVoiceButton();
        let errorMessage = 'Voice recognition error occurred.';
        
        switch(event.error) {
            case 'no-speech':
                errorMessage = 'No speech detected. Please try again.';
                break;
            case 'audio-capture':
                errorMessage = 'No microphone found. Please check your microphone.';
                break;
            case 'not-allowed':
                errorMessage = 'Microphone access denied. Please allow microphone access and reload the page.';
                break;
            case 'network':
                errorMessage = 'Network error occurred. Please check your internet connection.';
                break;
            case 'service-not-allowed':
                errorMessage = 'Speech recognition service not allowed. Please check your browser settings.';
                break;
            default:
                errorMessage = `Speech recognition error: ${event.error}`;
        }
        
        this.updateVoiceStatus(errorMessage, 'error');
        console.error('Speech recognition error:', event.error);
    }

    /**
     * Handle unsupported browser
     */
    handleUnsupportedBrowser() {
        this.voiceButton.style.display = 'none';
        this.voiceStatus.innerHTML = `
            <div class="browser-support">
                ‚ö†Ô∏è Voice recognition is not supported in this browser. 
                Please use Chrome, Edge, or Safari for voice features.
                You can still add tasks manually using the text input below.
            </div>
        `;
    }

    /**
     * Bind event listeners
     */
    bindEvents() {
        // Voice button
        this.voiceButton.addEventListener('click', () => {
            if (this.isListening) {
                this.stopVoiceRecognition();
            } else {
                this.startVoiceRecognition();
            }
        });

        // Manual input
        this.addButton.addEventListener('click', () => {
            this.addTaskFromInput();
        });

        this.taskInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.addTaskFromInput();
            }
        });

        this.taskInput.addEventListener('input', () => {
            this.updateCharCount();
            this.validateInput();
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            // Ctrl/Cmd + M for voice input
            if ((e.ctrlKey || e.metaKey) && e.key === 'm') {
                e.preventDefault();
                if (this.recognition && !this.isListening) {
                    this.startVoiceRecognition();
                }
            }
        });
    }

    /**
     * Start voice recognition
     */
    startVoiceRecognition() {
        if (this.recognition && !this.isListening) {
            try {
                this.recognition.start();
            } catch (error) {
                console.error('Failed to start voice recognition:', error);
                this.updateVoiceStatus('Voice recognition is already active or unavailable.', 'error');
            }
        }
    }

    /**
     * Stop voice recognition
     */
    stopVoiceRecognition() {
        if (this.recognition && this.isListening) {
            this.recognition.stop();
        }
    }

    /**
     * Update voice button state
     */
    updateVoiceButton(listening) {
        if (listening) {
            this.voiceButton.textContent = 'üõë Stop Listening';
            this.voiceButton.classList.add('listening');
            this.voiceButton.setAttribute('aria-label', 'Stop voice input');
        } else {
            this.resetVoiceButton();
        }
    }

    /**
     * Reset voice button to default state
     */
    resetVoiceButton() {
        this.isListening = false;
        this.voiceButton.textContent = 'üé§ Start Voice Input';
        this.voiceButton.classList.remove('listening');
        this.voiceButton.setAttribute('aria-label', 'Start voice input');
    }

    /**
     * Update voice status message
     */
    updateVoiceStatus(message, type = 'default') {
        this.voiceStatus.textContent = message;
        this.voiceStatus.className = 'voice-status';
        if (type !== 'default') {
            this.voiceStatus.classList.add(type);
        }
    }

    /**
     * Add task from manual input
     */
    addTaskFromInput() {
        const task = this.taskInput.value.trim();
        if (task && this.validateTaskLength(task)) {
            this.addTask(task);
            this.taskInput.value = '';
            this.updateCharCount();
            this.taskInput.focus();
        } else if (!task) {
            this.taskInput.focus();
        }
    }

    /**
     * Validate task length
     */
    validateTaskLength(task) {
        if (task.length > 200) {
            alert('Task is too long. Please keep it under 200 characters.');
            return false;
        }
        return true;
    }

    /**
     * Validate input as user types
     */
    validateInput() {
        const value = this.taskInput.value;
        const remaining = 200 - value.length;
        
        if (remaining < 0) {
            this.taskInput.style.borderColor = '#e74c3c';
            this.addButton.disabled = true;
        } else if (remaining < 20) {
            this.taskInput.style.borderColor = '#f39c12';
            this.addButton.disabled = false;
        } else {
            this.taskInput.style.borderColor = '#e0e0e0';
            this.addButton.disabled = false;
        }
    }

    /**
     * Update character count display
     */
    updateCharCount() {
        const current = this.taskInput.value.length;
        const max = 200;
        const remaining = max - current;
        
        this.charCount.textContent = `${current}/${max} characters`;
        
        if (remaining < 0) {
            this.charCount.style.color = '#e74c3c';
        } else if (remaining < 20) {
            this.charCount.style.color = '#f39c12';
        } else {
            this.charCount.style.color = '#666';
        }
    }

    /**
     * Add a new task
     */
    addTask(text, isVoice = false) {
        if (!this.validateTaskLength(text)) {
            return;
        }

        const task = {
            id: Date.now(),
            text: text,
            completed: false,
            createdAt: new Date().toISOString(),
            isVoice: isVoice
        };

        this.tasks.unshift(task);
        this.saveTasks();
        this.renderTasks();
        this.updateStats();

        // Add visual feedback for voice-added tasks
        if (isVoice) {
            setTimeout(() => {
                this.highlightNewTask(task.id);
            }, 100);
        }

        // Announce to screen readers
        this.announceToScreenReader(`Task added: ${text}`);
    }

    /**
     * Highlight newly added task
     */
    highlightNewTask(taskId) {
        const taskElement = document.querySelector(`[data-task-id="${taskId}"]`);
        if (taskElement) {
            taskElement.style.transform = 'scale(1.02)';
            taskElement.style.boxShadow = '0 8px 25px rgba(79, 172, 254, 0.3)';
            taskElement.style.transition = 'all 0.5s ease';
            
            setTimeout(() => {
                taskElement.style.transform = '';
                taskElement.style.boxShadow = '';
            }, 1000);
        }
    }

    /**
     * Toggle task completion status
     */
    toggleTask(id) {
        const task = this.tasks.find(t => t.id === id);
        if (task) {
            task.completed = !task.completed;
            task.completedAt = task.completed ? new Date().toISOString() : null;
            this.saveTasks();
            this.renderTasks();
            this.updateStats();
            
            const status = task.completed ? 'completed' : 'uncompleted';
            this.announceToScreenReader(`Task ${status}: ${task.text}`);
        }
    }

    /**
     * Delete a task
     */
    deleteTask(id) {
        const task = this.tasks.find(t => t.id === id);
        if (task && confirm(`Are you sure you want to delete: "${task.text}"?`)) {
            this.tasks = this.tasks.filter(t => t.id !== id);
            this.saveTasks();
            this.renderTasks();
            this.updateStats();
            this.announceToScreenReader(`Task deleted: ${task.text}`);
        }
    }

    /**
     * Render all tasks
     */
    renderTasks() {
        if (this.tasks.length === 0) {
            this.renderEmptyState();
            return;
        }

        this.taskList.innerHTML = this.tasks.map(task => this.renderTask(task)).join('');
    }

    /**
     * Render a single task
     */
    renderTask(task) {
        const timeAgo = this.formatTimeAgo(task.createdAt);
        const voiceIndicator = task.isVoice ? 'üé§ ' : '';
        const completedClass = task.completed ? 'completed' : '';
        const checkedClass = task.completed ? 'checked' : '';
        
        return `
            <div class="task-item ${completedClass}" data-task-id="${task.id}" role="listitem">
                <button 
                    class="task-checkbox ${checkedClass}" 
                    onclick="app.toggleTask(${task.id})"
                    aria-label="${task.completed ? 'Mark as incomplete' : 'Mark as complete'}"
                    role="checkbox"
                    aria-checked="${task.completed}"
                ></button>
                <div class="task-text" title="${this.escapeHtml(task.text)}">
                    ${voiceIndicator}${this.escapeHtml(task.text)}
                </div>
                <div class="task-time" title="Created ${new Date(task.createdAt).toLocaleString()}">
                    ${timeAgo}
                </div>
                <button 
                    class="delete-button" 
                    onclick="app.deleteTask(${task.id})"
                    aria-label="Delete task: ${this.escapeHtml(task.text)}"
                >
                    Delete
                </button>
            </div>
        `;
    }

    /**
     * Render empty state
     */
    renderEmptyState() {
        this.taskList.innerHTML = `
            <div class="empty-state">
                <h3>No tasks yet!</h3>
                <p>Add your first task using voice input or the text field above.</p>
                ${this.recognition ? '<p>üí° <strong>Tip:</strong> Press Ctrl+M (or Cmd+M on Mac) to quickly start voice input!</p>' : ''}
            </div>
        `;
    }

    /**
     * Update task statistics
     */
    updateStats() {
        const total = this.tasks.length;
        const completed = this.tasks.filter(t => t.completed).length;
        const pending = total - completed;

        this.totalTasks.textContent = total;
        this.completedTasks.textContent = completed;
        this.pendingTasks.textContent = pending;

        // Update page title with pending count
        const pendingText = pending > 0 ? `(${pending}) ` : '';
        document.title = `${pendingText}Voice To-Do List`;
    }

    /**
     * Format time ago string
     */
    formatTimeAgo(dateString) {
        const now = new Date();
        const date = new Date(dateString);
        const diff = now - date;
        
        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(diff / 3600000);
        const days = Math.floor(diff / 86400000);
        const weeks = Math.floor(diff / 604800000);

        if (weeks > 0) return `${weeks}w ago`;
        if (days > 0) return `${days}d ago`;
        if (hours > 0) return `${hours}h ago`;
        if (minutes > 0) return `${minutes}m ago`;
        return 'Just now';
    }

    /**
     * Escape HTML to prevent XSS
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    /**
     * Save tasks to localStorage
     */
    saveTasks() {
        try {
            localStorage.setItem('voiceTodoTasks', JSON.stringify(this.tasks));
        } catch (error) {
            console.error('Failed to save tasks:', error);
            alert('Failed to save tasks. Your browser storage might be full.');
        }
    }

    /**
     * Load tasks from localStorage
     */
    loadTasks() {
        try {
            const saved = localStorage.getItem('voiceTodoTasks');
            return saved ? JSON.parse(saved) : [];
        } catch (error) {
            console.error('Failed to load tasks:', error);
            return [];
        }
    }

    /**
     * Announce message to screen readers
     */
    announceToScreenReader(message) {
        const announcement = document.createElement('div');
        announcement.setAttribute('aria-live', 'polite');
        announcement.setAttribute('aria-atomic', 'true');
        announcement.style.position = 'absolute';
        announcement.style.left = '-10000px';
        announcement.style.width = '1px';
        announcement.style.height = '1px';
        announcement.style.overflow = 'hidden';
        announcement.textContent = message;
        
        document.body.appendChild(announcement);
        
        setTimeout(() => {
            document.body.removeChild(announcement);
        }, 1000);
    }

    /**
     * Export tasks as JSON
     */
    exportTasks() {
        const dataStr = JSON.stringify(this.tasks, null, 2);
        const dataBlob = new Blob([dataStr], {type: 'application/json'});
        const url = URL.createObjectURL(dataBlob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `voice-todo-tasks-${new Date().toISOString().split('T')[0]}.json`;
        link.click();
        URL.revokeObjectURL(url);
    }

    /**
     * Import tasks from JSON file
     */
    importTasks(file) {
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const imported = JSON.parse(e.target.result);
                if (Array.isArray(imported)) {
                    this.tasks = imported;
                    this.saveTasks();
                    this.renderTasks();
                    this.updateStats();
                    alert(`Successfully imported ${imported.length} tasks.`);
                } else {
                    throw new Error('Invalid file format');
                }
            } catch (error) {
                alert('Failed to import tasks. Please check the file format.');
                console.error('Import error:', error);
            }
        };
        reader.readAsText(file);
    }

    /**
     * Clear all tasks
     */
    clearAllTasks() {
        if (this.tasks.length === 0) {
            alert('No tasks to clear.');
            return;
        }

        if (confirm(`Are you sure you want to delete all ${this.tasks.length} tasks? This action cannot be undone.`)) {
            this.tasks = [];
            this.saveTasks();
            this.renderTasks();
            this.updateStats();
            this.announceToScreenReader('All tasks cleared');
        }
    }

    /**
     * Get app statistics
     */
    getStats() {
        const total = this.tasks.length;
        const completed = this.tasks.filter(t => t.completed).length;
        const voiceAdded = this.tasks.filter(t => t.isVoice).length;
        const today = new Date().toDateString();
        const todayTasks = this.tasks.filter(t => new Date(t.createdAt).toDateString() === today).length;

        return {
            total,
            completed,
            pending: total - completed,
            voiceAdded,
            manualAdded: total - voiceAdded,
            todayTasks,
            completionRate: total > 0 ? Math.round((completed / total) * 100) : 0
        };
    }
}

// Initialize the application when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.app = new VoiceTodoApp();
});

// Service Worker registration for offline support (optional)
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js')
            .then(registration => {
                console.log('SW registered: ', registration);
            })
            .catch(registrationError => {
                console.log('SW registration failed: ', registrationError);
            });
    });
}
